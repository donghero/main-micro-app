import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.AHPLLXzo.js";const g=JSON.parse('{"title":"本篇以React 16、17作为案例介绍 react 的接入方式，其它版本 react 的接入方式以此类推。我们默认开发者掌握了各版本 react 的开发技巧，如示例中 useEffect，在不支持 hooks 的版本中转换为 componentDidMount。","description":"","frontmatter":{},"headers":[],"relativePath":"framework/react.md","filePath":"framework/react.md"}'),t={name:"framework/react.md"},p=n(`<h1 id="本篇以react-16、17作为案例介绍-react-的接入方式-其它版本-react-的接入方式以此类推。我们默认开发者掌握了各版本-react-的开发技巧-如示例中-useeffect-在不支持-hooks-的版本中转换为-componentdidmount。" tabindex="-1">本篇以<code>React 16、17</code>作为案例介绍 react 的接入方式，其它版本 react 的接入方式以此类推。我们默认开发者掌握了各版本 react 的开发技巧，如示例中 useEffect，在不支持 hooks 的版本中转换为 componentDidMount。 <a class="header-anchor" href="#本篇以react-16、17作为案例介绍-react-的接入方式-其它版本-react-的接入方式以此类推。我们默认开发者掌握了各版本-react-的开发技巧-如示例中-useeffect-在不支持-hooks-的版本中转换为-componentdidmount。" aria-label="Permalink to &quot;本篇以\`React 16、17\`作为案例介绍 react 的接入方式，其它版本 react 的接入方式以此类推。我们默认开发者掌握了各版本 react 的开发技巧，如示例中 useEffect，在不支持 hooks 的版本中转换为 componentDidMount。&quot;">​</a></h1><h4 id="_1、设置跨域支持" tabindex="-1">1、设置跨域支持 <a class="header-anchor" href="#_1、设置跨域支持" aria-label="Permalink to &quot;1、设置跨域支持&quot;">​</a></h4><p>使用<code>create-react-app</code>脚手架创建的项目，在 <code>config/webpackDevServer.config.js</code> 文件中添加 headers。</p><p>其它项目在<code>webpack-dev-server</code>中添加 headers。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2、注册卸载函数" tabindex="-1">2、注册卸载函数 <a class="header-anchor" href="#_2、注册卸载函数" aria-label="Permalink to &quot;2、注册卸载函数&quot;">​</a></h4><p>子应用卸载时会自动执行<code>window.unmount</code>，在此可以进行卸载相关操作。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unmount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unmountComponentAtNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>完成以上步骤在运行时即可正常渲染。</p><h3 id="可选设置" tabindex="-1">可选设置 <a class="header-anchor" href="#可选设置" aria-label="Permalink to &quot;可选设置&quot;">​</a></h3><p>以下配置是针对子应用的，它们是可选的，建议根据实际情况选择设置。</p><h4 id="_1、开启-umd-模式-优化内存和性能" tabindex="-1">1、开启 umd 模式，优化内存和性能 <a class="header-anchor" href="#_1、开启-umd-模式-优化内存和性能" aria-label="Permalink to &quot;1、开启 umd 模式，优化内存和性能&quot;">​</a></h4><p>运行时 支持两种渲染在运行时的模式，默认模式和 umd 模式。</p><ul><li>**默认模式：**子应用在初次渲染和后续渲染时会顺序执行所有 js，以保证多次渲染的一致性。</li><li>**umd 模式：**子应用暴露出<code>mount</code>、<code>unmount</code>方法，此时只在初次渲染时执行所有 js，后续渲染只会执行这两个方法，在多次渲染时具有更好的性能和内存表现。</li></ul><p>如果子应用渲染和卸载不频繁，那么使用默认模式即可，如果子应用渲染和卸载非常频繁建议使用 umd 模式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;react-dom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 👇 将渲染操作放入 mount 函数，子应用初始化时会自动执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 👇 将卸载操作放入 unmount 函数，就是上面步骤2中的卸载函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unmount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unmountComponentAtNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果不在运行时环境，则直接执行mount渲染</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.__MICRO_APP_ENVIRONMENT__) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2、设置-webpack-jsonpfunction" tabindex="-1">2、设置 webpack.jsonpFunction <a class="header-anchor" href="#_2、设置-webpack-jsonpfunction" aria-label="Permalink to &quot;2、设置 webpack.jsonpFunction&quot;">​</a></h4><p>如果在运行时正常运行，可以忽略这一步。</p><p>如果子应用资源加载混乱导致渲染失败，可以尝试设置<code>jsonpFunction</code>来解决，因为相同的<code>jsonpFunction</code>名称会导致资源污染。</p><p>这种情况常见于主应用和子应用都是通过<code>create-react-app</code>等脚手架创建的项目。</p><p><strong>解决方式：修改子应用的 webpack 配置</strong></p><h4 id="webpack4" tabindex="-1">** webpack4 ** <a class="header-anchor" href="#webpack4" aria-label="Permalink to &quot;** webpack4 **&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsonpFunction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`webpackJsonp_自定义名称\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    globalObject: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;window&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="webpack5" tabindex="-1">** webpack5 ** <a class="header-anchor" href="#webpack5" aria-label="Permalink to &quot;** webpack5 **&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkLoadingGlobal: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpackJsonp_自定义名称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    globalObject: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;window&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3、设置-publicpath" tabindex="-1">3、设置 publicPath <a class="header-anchor" href="#_3、设置-publicpath" aria-label="Permalink to &quot;3、设置 publicPath&quot;">​</a></h4><p>如果子应用出现静态资源地址 404(js、css、图片)，建议设置<code>publicPath</code>来尝试解决这个问题。</p><p><code>publicPath</code>是 webpack 提供的功能，它可以补全静态资源的地址，详情参考 webpack 文档 <a href="https://webpack.docschina.org/guides/public-path/#on-the-fly" target="_blank" rel="noreferrer">publicPath</a></p><p><strong>步骤 1:</strong> 在子应用 src 目录下创建名称为<code>public-path.js</code>的文件，并添加如下内容</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// __MICRO_APP_ENVIRONMENT__和__MICRO_APP_PUBLIC_PATH__是由micro-app注入的全局变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.__MICRO_APP_ENVIRONMENT__) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // eslint-disable-next-line</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  __webpack_public_path__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.__MICRO_APP_PUBLIC_PATH__;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>步骤 2:</strong> 在子应用入口文件的<strong>最顶部</strong>引入<code>public-path.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// entry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./public-path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="_4、切换到-iframe-沙箱" tabindex="-1">4、切换到 iframe 沙箱 <a class="header-anchor" href="#_4、切换到-iframe-沙箱" aria-label="Permalink to &quot;4、切换到 iframe 沙箱&quot;">​</a></h4><p>运行时 有两种沙箱方案：<code>with沙箱</code>和<code>iframe沙箱</code>。</p><p>默认开启 with 沙箱，如果 with 沙箱无法正常运行，可以尝试切换到 iframe 沙箱。</p><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><p>无</p>`,37),e=[p];function h(l,k,d,r,o,c){return a(),i("div",null,e)}const u=s(t,[["render",h]]);export{g as __pageData,u as default};
