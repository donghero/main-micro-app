/**
 * 通信情况：
 * 1.运行时主体与各插件之间：
 *   通讯方式：
 *      1.1 全局
 *      1.2 针对某个某些（或某类）插件
 * 2.父插件与子孙插件之间
 *   通讯方式：
 *      2.1 全局可监听
 *      2.2 针对某个某些（或某类）插件
 *          2.2.1 直接调用插件的方法
 *          2.2.2 插件直接调用父插件的方法
 * 3.插件与插件之间
 *   通讯方式：
 *      3.1 共同上级插件做中间方
 *      
 * 总结：
 *   1. 运行时提供全局状态与监听事件
 *   2. 父插件提供全局状态与监听事件（即运行时赋予插件能够监听父插件的通过运行时方法提供全局状态的能力）
 *   3. 父插件针对某个自己知道的插件提供状态与监听事件（即运行时赋予父插件与子插件直接通讯的能力）  
 * 方案：
 *    1.freelogApp下提供运行时级别的全局状态与监听
 *    2.freelogApp下提供主题控制级别的全局状态定义改变和监听（统一通信方式） 
 *    3.注册插件时注入父插件给子孙插件数据（例如某个方法，通过这个方法子插件可以与父插件通讯）
 *      例如moutwidget(..., data)   子插件通过freelogApp.getParentData() 获取父插件提供的数据，至于是什么数据自行约定,
 *      同时子插件也可以通过该数据来提供数据给父插件访问 
 *    而目前有插件配置数据，可以在这个数据里面传递
 * 
 *  提供全局事件，主题发布事件，插件订阅事件，  插件先订阅事件，供外界使用，，其余使用者可以通过触发事件才调用。
 *  可以定义发布的事件的保密性，例如是否只能由父级插件调用，祖辈级、子级等其余级能不能用
 *  相当于通过订阅事件来传递api？但是事件会重复的，有没有更好的方式？事件名称加上插件名称的编码才行！
 */
export function dev():any{ 
     
}
